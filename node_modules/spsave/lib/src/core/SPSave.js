"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Promise = require("bluebird");
var notifier = require("node-notifier");
var path = require("path");
var FileSaver_1 = require("./FileSaver");
var ConsoleLogger_1 = require("./../utils/ConsoleLogger");
var FileOptionsParser_1 = require("./../utils/FileOptionsParser");
var Defer_1 = require("./../utils/Defer");
Promise.longStackTraces();
var logger = new ConsoleLogger_1.ConsoleLogger();
function spsave(coreOptions, credentialOptions, fileOptions) {
    return new Promise(function (resolve, reject) {
        var spSaveOptions = {
            creds: credentialOptions,
            core: coreOptions,
            files: FileOptionsParser_1.FileOptionsParser.parseOptions(fileOptions)
        };
        var showNotification = function () {
            if (!coreOptions.notification) {
                return;
            }
            notifier.notify({
                title: "spsave: " + spSaveOptions.files.length + " file(s) uploaded",
                message: spSaveOptions.files.map(function (o) { return o.fileName; }).join(', '),
                icon: path.join(__dirname, '../../../assets/sp.png')
            });
        };
        if (spSaveOptions.files.length > 1) {
            saveFileArray(spSaveOptions).then(function (data) {
                showNotification();
                resolve(data);
                return null;
            })
                .catch(function (err) {
                showError(err, coreOptions.notification);
                reject(err);
            });
        }
        else if (spSaveOptions.files.length === 1) {
            saveSingleFile(spSaveOptions).then(function (data) {
                showNotification();
                resolve(data);
                return null;
            })
                .catch(function (err) {
                showError(err, coreOptions.notification);
                reject(err);
            });
        }
        else {
            reject({
                message: 'No files were uploaded. No files were found which match your criteria.'
            });
        }
    });
}
exports.spsave = spsave;
function saveFileArray(opts, deferred) {
    if (!deferred) {
        deferred = Defer_1.defer();
    }
    if (opts.files.length > 0) {
        saveSingleFile(opts)
            .then(function () {
            opts.files = opts.files.slice(1, opts.files.length);
            saveFileArray(opts, deferred);
            return null;
        })
            .catch(function (err) {
            deferred.reject(err);
        });
    }
    else {
        deferred.resolve(undefined);
    }
    return deferred.promise;
}
function saveSingleFile(opts) {
    return new FileSaver_1.FileSaver(opts.core, opts.creds, opts.files[0]).save();
}
function showError(err, notify) {
    if (notify) {
        notifier.notify({
            title: 'spsave: error occured',
            message: 'For details see console log',
            icon: path.join(__dirname, '../../../assets/sp_error.png')
        });
    }
    if (!err || !err.message) {
        logger.error('Unknown error occured');
        if (err && err.stack) {
            logger.info('');
            logger.info('Stack trace:');
            logger.info('');
            logger.error(err.stack);
        }
        return;
    }
    logger.error('Error occured:');
    if (err.message) {
        logger.error(err.message);
    }
    if (err.stack) {
        logger.info('');
        logger.info('Stack trace:');
        logger.info('');
        logger.error(err.stack);
    }
}
