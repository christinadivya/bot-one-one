"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Promise = require("bluebird");
var sprequest = require("sp-request");
var url = require("url");
var _ = require("lodash");
var SPSaveOptions_1 = require("./SPSaveOptions");
var UrlHelper_1 = require("./../utils/UrlHelper");
var FoldersCreator_1 = require("./../utils/FoldersCreator");
var ConsoleLogger_1 = require("./../utils/ConsoleLogger");
var Defer_1 = require("./../utils/Defer");
var FileSaver = (function () {
    function FileSaver(coreOptions, credentialOptions, fileOptions) {
        this.sprequest = sprequest.create(credentialOptions);
        this.file = _.assign({}, fileOptions);
        this.coreOptions = _.assign({}, coreOptions);
        _.defaults(this.coreOptions, {
            checkin: false,
            checkinType: SPSaveOptions_1.CheckinType.minor,
            checkinMessage: 'Checked in by spsave'
        });
        this.coreOptions.siteUrl = UrlHelper_1.UrlHelper.removeTrailingSlash(this.coreOptions.siteUrl);
        this.file.folder = UrlHelper_1.UrlHelper.trimSlashes(this.file.folder);
        this.path = UrlHelper_1.UrlHelper.removeTrailingSlash(url.parse(this.coreOptions.siteUrl).path);
        this.foldersCreator = new FoldersCreator_1.FoldersCreator(this.sprequest, this.file.folder, this.coreOptions.siteUrl);
        this.logger = new ConsoleLogger_1.ConsoleLogger();
        this.buildRestUrls();
    }
    FileSaver.prototype.save = function () {
        var deferred = Defer_1.defer();
        if (typeof this.file.fileContent === 'string' && Buffer.byteLength(this.file.fileContent) === 0) {
            this.skipUpload(deferred);
        }
        else if (this.file.fileContent.length === 0) {
            this.skipUpload(deferred);
        }
        else {
            this.saveFile(deferred);
        }
        return deferred.promise;
    };
    FileSaver.prototype.saveFile = function (requestDeferred, attempts) {
        var _this = this;
        if (attempts === void 0) { attempts = 1; }
        if (attempts > FileSaver.maxAttempts) {
            var message = "File '" + this.file.fileName + "' probably is not uploaded: too many errors. Upload process interrupted.";
            this.logger.error(message);
            requestDeferred.reject(new Error(message));
            return;
        }
        var checkoutResult = this.checkoutFile();
        var uploadResult = checkoutResult
            .then(function () {
            return _this.sprequest.requestDigest(_this.coreOptions.siteUrl);
        })
            .then(function (digest) {
            return _this.sprequest.post(_this.uploadFileRestUrl, {
                headers: {
                    'X-RequestDigest': digest
                },
                body: _this.file.fileContent,
                json: false
            });
        });
        Promise.all([checkoutResult, uploadResult])
            .then(function (result) {
            return _this.updateMetaData(result);
        })
            .then(function (result) {
            var fileExists = result[0];
            var data = result[1];
            if (_this.coreOptions.checkin && fileExists) {
                return _this.checkinFile();
            }
            else if (_this.coreOptions.checkin && !fileExists) {
                _this.saveFile(requestDeferred, attempts + 1);
                return null;
            }
            else {
                _this.logger.success(_this.file.fileName + (" successfully uploaded to '" + _this.coreOptions.siteUrl + "/" + _this.file.folder + "'"));
            }
            requestDeferred.resolve(JSON.parse(data.body));
            return null;
        }).then(function (data) {
            if (!data) {
                return;
            }
            if (requestDeferred.promise.isPending()) {
                _this.logger.success(_this.file.fileName +
                    (" successfully uploaded to '" + _this.coreOptions.siteUrl + "/" + _this.file.folder + "' and checked in.") +
                    (" Checkin type: " + SPSaveOptions_1.CheckinType[_this.coreOptions.checkinType]));
                requestDeferred.resolve(data.body);
            }
        })
            .catch(function (err) {
            if (err && (err.statusCode === 500 || err.statusCode === 409)) {
                _this.tryReUpload(err, requestDeferred, attempts);
                return;
            }
            if (err && err.statusCode === 404 && err.message && err.message.indexOf(FileSaver.directoryNotFoundCode) !== -1) {
                _this.foldersCreator.createFoldersHierarchy()
                    .then(function () {
                    _this.saveFile(requestDeferred, attempts + 1);
                    return null;
                })
                    .catch(function (folderError) {
                    requestDeferred.reject(folderError);
                });
                return;
            }
            requestDeferred.reject(err);
        });
    };
    FileSaver.prototype.skipUpload = function (deferred) {
        this.logger.warning("File '" + this.file.fileName + "': skipping, file content is empty.");
        deferred.resolve(true);
    };
    FileSaver.prototype.updateMetaData = function (data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this.coreOptions.filesMetaData || _this.coreOptions.filesMetaData.length === 0) {
                resolve(data);
                return;
            }
            var fileMetaData = _this.coreOptions.filesMetaData.filter(function (fileData) {
                return fileData.fileName === _this.file.fileName;
            })[0];
            if (!fileMetaData || fileMetaData.updated) {
                resolve(data);
                return;
            }
            _this.sprequest.requestDigest(_this.coreOptions.siteUrl)
                .then(function (digest) {
                return _this.sprequest.post(_this.updateMetaDataRestUrl, {
                    headers: {
                        'X-RequestDigest': digest,
                        'IF-MATCH': '*',
                        'X-HTTP-Method': 'MERGE'
                    },
                    body: fileMetaData.metadata
                });
            })
                .then(function () {
                fileMetaData.updated = true;
                resolve(data);
                return null;
            })
                .catch(reject);
        });
    };
    FileSaver.prototype.checkinFile = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.sprequest.requestDigest(_this.coreOptions.siteUrl)
                .then(function (digest) {
                return _this.sprequest.post(_this.checkinFileRestUrl, {
                    headers: {
                        'X-RequestDigest': digest
                    }
                });
            })
                .then(function (data) {
                resolve(data);
                return null;
            })
                .catch(reject);
        });
    };
    FileSaver.prototype.checkoutFile = function () {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            if (!_this.coreOptions.checkin) {
                resolve(true);
                return undefined;
            }
            _this.getFileByUrl()
                .then(function (data) {
                if (data.body.d.CheckOutType === 0) {
                    resolve(true);
                    return null;
                }
                return _this.sprequest.requestDigest(_this.coreOptions.siteUrl)
                    .then(function (digest) {
                    return _this.sprequest.post(_this.checkoutFileRestUrl, {
                        headers: {
                            'X-RequestDigest': digest
                        }
                    });
                });
            }, function (err) {
                if (err.message.indexOf(FileSaver.fileDoesNotExistOnpremCode) !== -1 ||
                    err.message.indexOf(FileSaver.fileDoesNotExistOnlineCode) !== -1) {
                    resolve(false);
                    return null;
                }
                reject(err);
                return null;
            })
                .then(function (data) {
                if (promise.isPending()) {
                    _this.logger.info(_this.file.fileName + " checked out.");
                    resolve(true);
                }
                return null;
            })
                .catch(reject);
        });
        return promise;
    };
    FileSaver.prototype.getFileByUrl = function () {
        return this.sprequest.get(this.getFileRestUrl);
    };
    FileSaver.prototype.tryReUpload = function (exception, deferred, attempts) {
        var _this = this;
        var errorData;
        try {
            errorData = JSON.parse(exception.error);
        }
        catch (e) {
            deferred.reject(exception);
            return;
        }
        var reUpload = function () {
            setTimeout(function () {
                _this.saveFile(deferred, attempts + 1);
            }, FileSaver.reUploadTimeout);
        };
        if (errorData.error) {
            if (errorData.error.code && errorData.error.code.indexOf(FileSaver.saveConfilctCode) === 0) {
                this.logger.warning("Save conflict detected for file '" + this.file.fileName + "'. Trying to re-upload...");
                reUpload();
            }
            else if (errorData.error.code && errorData.error.code.indexOf(FileSaver.cobaltCode) === 0) {
                this.logger.warning("Cobalt error detected for file '" + this.file.fileName + "'. Trying to re-upload...");
                reUpload();
            }
            else {
                this.logger.error(errorData.error);
                deferred.reject(exception);
            }
        }
        else {
            deferred.reject(exception);
        }
    };
    FileSaver.prototype.buildRestUrls = function () {
        var fileServerRelativeUrl = this.path + "/" + this.file.folder + "/" + this.file.fileName;
        this.uploadFileRestUrl = this.coreOptions.siteUrl +
            '/_api/web/GetFolderByServerRelativeUrl(@FolderName)/Files/add(url=@FileName,overwrite=true)' +
            ("?@FolderName='" + encodeURIComponent(this.file.folder) + "'&@FileName='" + encodeURIComponent(this.file.fileName) + "'");
        this.getFileRestUrl = this.coreOptions.siteUrl + '/_api/web/GetFileByServerRelativeUrl(@FileUrl)' +
            ("?@FileUrl='" + encodeURIComponent(fileServerRelativeUrl) + "'");
        this.checkoutFileRestUrl = this.coreOptions.siteUrl + '/_api/web/GetFileByServerRelativeUrl(@FileUrl)/CheckOut()' +
            ("?@FileUrl='" + encodeURIComponent(fileServerRelativeUrl) + "'");
        this.checkinFileRestUrl = this.coreOptions.siteUrl +
            '/_api/web/GetFileByServerRelativeUrl(@FileUrl)/CheckIn(comment=@Comment,checkintype=@Type)' +
            ("?@FileUrl='" + encodeURIComponent(fileServerRelativeUrl) + "'&@Comment='" + (this.coreOptions.checkinMessage) + "'") +
            ("&@Type='" + this.coreOptions.checkinType + "'");
        this.updateMetaDataRestUrl = this.coreOptions.siteUrl + '/_api/web/GetFileByServerRelativeUrl(@FileUrl)/ListItemAllFields' +
            ("?@FileUrl='" + encodeURIComponent(fileServerRelativeUrl) + "'");
    };
    FileSaver.saveConfilctCode = '-2130246326';
    FileSaver.cobaltCode = '-1597308888';
    FileSaver.directoryNotFoundCode = '-2147024893';
    FileSaver.fileDoesNotExistOnpremCode = '-2146232832';
    FileSaver.fileDoesNotExistOnlineCode = '-2130575338';
    FileSaver.reUploadTimeout = 1500;
    FileSaver.maxAttempts = 3;
    return FileSaver;
}());
exports.FileSaver = FileSaver;
