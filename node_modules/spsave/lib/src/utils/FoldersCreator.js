"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Promise = require("bluebird");
var UrlHelper_1 = require("./UrlHelper");
var ConsoleLogger_1 = require("./ConsoleLogger");
var Defer_1 = require("./Defer");
var FoldersCreator = (function () {
    function FoldersCreator(sprequest, folder, siteUrl) {
        this.sprequest = sprequest;
        this.folder = folder;
        this.siteUrl = siteUrl;
        this.folder = UrlHelper_1.UrlHelper.trimSlashes(folder);
        this.siteUrl = UrlHelper_1.UrlHelper.removeTrailingSlash(siteUrl);
        this.getFolderRestUrlBase = this.siteUrl + '/_api/web/GetFolderByServerRelativeUrl(@FolderName)';
        this.createFolderRestUrlBase = this.siteUrl + '/_api/web/folders';
        this.logger = new ConsoleLogger_1.ConsoleLogger();
    }
    FoldersCreator.prototype.createFoldersHierarchy = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var folderPaths = [];
            var paths = _this.folder.split('/').filter(function (path) { return path !== ''; });
            _this.createFoldersPathArray(paths, folderPaths);
            var getFolderPromises = [];
            folderPaths.forEach(function (folder) {
                var getFolderUrl = _this.getFolderRestUrlBase + ("?@FolderName='" + encodeURIComponent(folder) + "'");
                getFolderPromises.push(_this.sprequest.get(getFolderUrl).reflect());
            });
            Promise.all(getFolderPromises)
                .then(function (data) {
                var foldersToCreate = data.map(function (promise, index) {
                    if (promise.isRejected() && (promise.reason().statusCode === 404 || promise.reason().statusCode === 500)) {
                        return index;
                    }
                    else if (promise.isRejected()) {
                        reject(promise.reason());
                    }
                }).filter(function (index) {
                    return index !== undefined;
                }).map(function (index) {
                    return folderPaths[index];
                });
                if (foldersToCreate.length > 0) {
                    _this.logger.info("Creating folder or full folders hierarchy: '" + _this.folder + "'");
                    _this.createFolders(foldersToCreate)
                        .then(function () {
                        resolve(undefined);
                    })
                        .catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    resolve(undefined);
                }
            });
        });
    };
    FoldersCreator.prototype.createFolders = function (folders, deferred) {
        var _this = this;
        if (!deferred) {
            deferred = Defer_1.defer();
        }
        if (folders.length > 0) {
            this.sprequest.requestDigest(this.siteUrl)
                .then(function (digest) {
                return _this.sprequest.post(_this.createFolderRestUrlBase, {
                    body: {
                        '__metadata': { 'type': 'SP.Folder' },
                        'ServerRelativeUrl': "" + folders[0]
                    },
                    headers: {
                        'X-RequestDigest': digest
                    }
                });
            })
                .then(function (data) {
                _this.createFolders(folders.slice(1, folders.length), deferred);
                return null;
            })
                .catch(function (err) {
                deferred.reject(err);
            });
        }
        else {
            deferred.resolve(undefined);
        }
        return deferred.promise;
    };
    FoldersCreator.prototype.createFoldersPathArray = function (paths, result, index) {
        if (index === void 0) { index = 0; }
        if (index === 0) {
            result.push(paths[index]);
        }
        else {
            result.push(result[index - 1] + "/" + paths[index]);
        }
        if (index === paths.length - 1) {
            return;
        }
        return this.createFoldersPathArray(paths, result, index + 1);
    };
    return FoldersCreator;
}());
exports.FoldersCreator = FoldersCreator;
