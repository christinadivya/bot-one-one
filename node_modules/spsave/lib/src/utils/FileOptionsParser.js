"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var File = require("vinyl");
var _ = require("lodash");
var path = require("path");
var globby = require("globby");
var fs = require("fs");
var opts = require("./../core/SPSaveOptions");
var UrlHelper_1 = require("./UrlHelper");
var FileOptionsParser = (function () {
    function FileOptionsParser() {
    }
    FileOptionsParser.parseOptions = function (options) {
        if (opts.isFileContentOptions(options)) {
            return [options];
        }
        if (opts.isGlobOptions(options)) {
            var fileContentOptions_1 = [];
            _.defaults(options, {
                folder: ''
            });
            FileOptionsParser.createVinylFromGlob(options)
                .forEach(function (file) {
                fileContentOptions_1.push(FileOptionsParser.createFileOptionsFromVinyl(file, options));
            });
            return fileContentOptions_1;
        }
        if (opts.isVinylOptions(options)) {
            _.defaults(options, {
                folder: ''
            });
            return [FileOptionsParser.createFileOptionsFromVinyl(options.file, options)];
        }
        return undefined;
    };
    FileOptionsParser.createFileOptionsFromVinyl = function (file, options) {
        var newOptions = _.assign({}, options);
        newOptions.fileName = path.basename(file.path);
        newOptions.fileContent = file.contents;
        newOptions.folder = FileOptionsParser.getFolderToUpload(file, options.folder);
        if (!newOptions.folder || newOptions.folder === '.') {
            throw new Error('Folder option is empty. Either provide folder explicitly, or specify "base" option');
        }
        return newOptions;
    };
    FileOptionsParser.createVinylFromGlob = function (options) {
        var cwd = process.cwd();
        return globby.sync(options.glob, { cwd: cwd }).map(function (filePath) {
            var stat = fs.statSync(filePath);
            if (stat.isDirectory()) {
                return undefined;
            }
            return new File({
                cwd: cwd,
                base: options.base || path.dirname(path.resolve(filePath)),
                path: path.resolve(filePath),
                stat: stat,
                contents: fs.readFileSync(filePath)
            });
        })
            .filter(function (x) {
            return x !== undefined;
        });
    };
    FileOptionsParser.getFolderToUpload = function (file, folder) {
        var parsedBase = file.base || path.dirname(path.resolve(file.path));
        var base = parsedBase.replace(/\\/g, '/');
        var filePath = file.path.replace(/\\/g, '/');
        var fileName = path.basename(file.path);
        var indx = filePath.indexOf(base);
        if (indx === -1) {
            throw new Error("'base' option has invalid value. 'base' should be a substring of the file path. 'base': " + file.base +
                (" file path: " + file.path));
        }
        var startIndex = indx + base.length;
        var folderPart = filePath.substring(startIndex, filePath.length).replace(fileName, '').replace(/\/\//g, '/');
        return UrlHelper_1.UrlHelper.trimSlashes(path.join(folder, folderPart).replace(/\\/g, '/'));
    };
    return FileOptionsParser;
}());
exports.FileOptionsParser = FileOptionsParser;
