"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var cpass_1 = require("cpass");
var spauth = require("node-sp-auth");
var utils_1 = require("./utils");
var siteUrl_1 = require("./wizards/siteUrl");
var chooseStrategy_1 = require("./wizards/chooseStrategy");
var askCredentials_1 = require("./wizards/askCredentials");
var saveOnDisk_1 = require("./wizards/saveOnDisk");
var config_1 = require("./config");
var AuthConfig = (function () {
    function AuthConfig(settings) {
        if (settings === void 0) { settings = {}; }
        var _this = this;
        this.getContext = function () {
            return _this.checkForPrompts()
                .then(function (checkPromptsResponse) {
                var authContext = __assign({}, checkPromptsResponse.authContext, { settings: _this.settings });
                if (!checkPromptsResponse.needPrompts) {
                    if (checkPromptsResponse.needSave) {
                        return utils_1.saveConfigOnDisk(authContext, _this.settings)
                            .then(function (_) { return authContext; });
                    }
                    else {
                        return new Promise(function (r) { return r(authContext); });
                    }
                }
                else {
                    return siteUrl_1.default(authContext, {}, _this.settings)
                        .then(function (answersResult) {
                        return chooseStrategy_1.default(authContext, answersResult, _this.settings);
                    })
                        .then(function (answersResult) {
                        return askCredentials_1.default(authContext, answersResult, _this.settings);
                    })
                        .then(function (answersResult) {
                        if (typeof _this.customData !== 'undefined') {
                            answersResult.custom = _this.customData;
                        }
                        return saveOnDisk_1.default(authContext, answersResult, _this.settings);
                    })
                        .then(function (answersResult) {
                        return utils_1.convertSettingsToAuthContext(answersResult, _this.settings);
                    });
                }
            });
        };
        this.tryAuth = function (authContext) {
            return spauth.getAuth(authContext.siteUrl, authContext.authOptions);
        };
        this.checkForPrompts = function () {
            var getJsonContent = function (filePath, jsonData) {
                return new Promise(function (resolve) {
                    if (typeof jsonData === 'undefined') {
                        fs.stat(filePath, function (err, _stats) {
                            var exists = err ? false : true;
                            var jsonRawData = {};
                            if (exists) {
                                try {
                                    jsonRawData = JSON.parse(fs.readFileSync(path.resolve(filePath)).toString());
                                }
                                catch (ex) {
                                }
                            }
                            if (typeof jsonRawData.custom !== 'undefined') {
                                _this.customData = jsonRawData.custom;
                                delete jsonRawData.custom;
                            }
                            resolve({ exists: exists, jsonRawData: jsonRawData });
                        });
                    }
                    else {
                        resolve({ exists: true, jsonRawData: jsonData });
                    }
                });
            };
            var runCheckForPrompts = function (checkObject) {
                return getJsonContent(_this.settings.configPath, _this.settings.authOptions)
                    .then(function (check) {
                    checkObject.needPrompts = !check.exists;
                    checkObject.jsonRawData = check.jsonRawData;
                    return checkObject;
                })
                    .then(function (checkObj) {
                    if (typeof _this.settings.defaultConfigPath !== 'undefined') {
                        return getJsonContent(_this.settings.defaultConfigPath)
                            .then(function (check) {
                            checkObj.jsonRawData = __assign({}, check.jsonRawData, checkObj.jsonRawData);
                            return checkObject;
                        });
                    }
                    else {
                        return checkObj;
                    }
                })
                    .then(function (checkObj) {
                    _this.context = checkObj.jsonRawData;
                    var withPassword;
                    var strategies = _this.strategies.filter(function (strategy) {
                        return strategy.id === _this.context.strategy;
                    });
                    var passwordPropertyName = utils_1.getHiddenPropertyName(_this.context);
                    if (strategies.length === 1) {
                        withPassword = strategies[0].withPassword;
                    }
                    else {
                        withPassword = typeof _this.context[passwordPropertyName] !== 'undefined';
                    }
                    if (withPassword) {
                        var initialPassword = "" + (_this.context[passwordPropertyName] || '');
                        if (!_this.context[passwordPropertyName]) {
                            checkObj.needPrompts = true;
                        }
                        else {
                            _this.context[passwordPropertyName] = _this.cpass.decode(_this.context[passwordPropertyName]);
                            var decodedPassword = _this.context[passwordPropertyName];
                            if (initialPassword === decodedPassword && _this.settings.encryptPassword && _this.settings.saveConfigOnDisk) {
                                checkObj.needSave = true;
                            }
                        }
                    }
                    checkObj.authContext = utils_1.convertSettingsToAuthContext(_this.context);
                    if (_this.settings.forcePrompts === true) {
                        checkObj.needPrompts = true;
                    }
                    if (strategies.length === 1) {
                        if (!checkObj.needPrompts) {
                            checkObj.needPrompts = !strategies[0].verifyCallback(_this.context.siteUrl, _this.context);
                        }
                        return checkObj;
                    }
                    else {
                        if (checkObj.needPrompts) {
                            return checkObj;
                        }
                        else {
                            try {
                                return _this.tryAuth(checkObj.authContext)
                                    .then(function () {
                                    checkObj.needPrompts = false;
                                    return checkObj;
                                })
                                    .catch(function (_error) {
                                    checkObj.needPrompts = true;
                                    return checkObj;
                                });
                            }
                            catch (ex) {
                                checkObj.needPrompts = true;
                                return checkObj;
                            }
                        }
                    }
                });
            };
            var checkPromptsObject = {
                needPrompts: true,
                needSave: false
            };
            return runCheckForPrompts(checkPromptsObject).then(function (checkPrompts) {
                var needPrompts = checkPrompts.needPrompts;
                if (_this.settings.headlessMode) {
                    needPrompts = false;
                }
                return __assign({}, checkPrompts, { needPrompts: needPrompts });
            });
        };
        this.strategies = config_1.getStrategies();
        this.targets = config_1.getTargetsTypes();
        this.settings = __assign({}, settings, { configPath: path.resolve(settings.configPath || './config/private.json'), encryptPassword: typeof settings.encryptPassword !== 'undefined' ? settings.encryptPassword : true, saveConfigOnDisk: typeof settings.saveConfigOnDisk !== 'undefined' ? settings.saveConfigOnDisk : true });
        if (typeof this.settings.encryptPassword === 'string') {
            this.settings.encryptPassword = !(this.settings.encryptPassword.toLowerCase() === 'false');
        }
        this.cpass = new cpass_1.Cpass(settings.masterKey);
    }
    return AuthConfig;
}());
exports.AuthConfig = AuthConfig;
//# sourceMappingURL=index.js.map