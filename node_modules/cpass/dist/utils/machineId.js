"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var common_1 = require("./common");
var platforms = {
    darwin: 'ioreg -rd1 -c IOPlatformExpertDevice',
    ia32: '%windir%\\sysnative\\cmd.exe \/c %windir%\\System32\\REG ' +
        'QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography ' +
        '/v MachineGuid',
    x64: '%windir%\\System32\\REG ' +
        'QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography ' +
        '/v MachineGuid',
    linux: 'cat /var/lib/dbus/machine-id /etc/machine-id 2> /dev/null || :'
};
var expose = function (machineRawInfo) {
    switch (process.platform) {
        case 'darwin':
            return machineRawInfo
                .split('IOPlatformUUID')[1]
                .split('\n')[0].replace(/\=|\s+|\"/ig, '')
                .toLowerCase();
        case 'win32':
            return machineRawInfo
                .toString()
                .split('REG_SZ')[1]
                .replace(/\r+|\n+|\s+/ig, '')
                .toLowerCase();
        case 'linux':
            return machineRawInfo
                .toString()
                .replace(/\r+|\n+|\s+/ig, '')
                .toLowerCase();
        default:
            throw new Error("Unsupported platform: " + process.platform);
    }
};
var getExecCommand = function () {
    var command;
    if (process.platform === 'win32') {
        var is32 = false;
        try {
            is32 = !!require('fs').statSync('C:\\windows\\sysnative');
        }
        catch (e) { }
        command = platforms[is32 ? 'ia32' : 'x64'];
    }
    else {
        command = platforms[process.platform];
    }
    return command;
};
exports.machineIdSync = function (original) {
    if (original === void 0) { original = true; }
    var id = expose(child_process_1.execSync(getExecCommand()).toString());
    return original ? id : common_1.hash(id);
};
exports.machineId = function (original) {
    if (original === void 0) { original = true; }
    return new Promise(function (resolve, reject) {
        return child_process_1.exec(getExecCommand(), {}, function (err, stdout, stderr) {
            if (err) {
                return reject(new Error("Error while obtaining machine id: " + err.stack));
            }
            var id = expose(stdout.toString());
            return resolve(original ? id : common_1.hash(id));
        });
    });
};
//# sourceMappingURL=machineId.js.map